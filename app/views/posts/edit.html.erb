
<div id ='tag-sidebar' class="navbar-fixed col-lg-2">

  <% if @post.tags.any? %>

    <% @post.tags.each do |tag| %>

      <h4 class='text-center'>

      <%= link_to tag, tag_posts_path(tag) %> 

      </h4>

    <% end %>

  <% end %>

</div>


<div class='edit-post-display post-display col-md-4'>

  <div class='row edit-post-header post-header'>

    <h4>
    <%= @post.title %>
    </h4>
  
  </div>

  <div class='image-container'>

  <% if @post.image_file_name.present? %>

    <div id='original-image'>

    <%= image_tag @post.image.url(:large), class: 'instagram_upload' %>

    </div>

  <% end %>

    <div id='draw'></div>

  </div>
  
  <div class='post-content'>
    
    <%= @post.content %>

  </div>

  <div class='edit-post-tags post-tags'>

      <% if @post.tags.any? %>
        
        <% @post.tags.each do |tag| %>

          <%= link_to tag, tag_posts_path(tag), :class => 'post-tag' %>

        <% end %>

      <% end %>

  </div>

</div>



  <div id='pencil-picker'>
      <form id='pick'>
      <input id='colour' value='#FF6666' type='text' placeholder='Pick a colour'>
      <input id='thickness' type='range' name='thickness' min='1' max='50' value='20'>
      <button type='submit'>Draw!</button>
      </form>
  </div>


  <%= form_for @post, html: { id: "add_drawing" } do |form| %>

      <%= form.hidden_field :drawing %>

      <%= form.submit %>

  <% end %>



<script src='https://code.jquery.com/jquery-2.0.3.min.js'></script>
<script>


function makeCanvasWithPen(colour, thickness) {
    // Creates a new canvas element and appends it as a child
    // to the parent element, and returns the reference to
    // the newly created canvas element

    function createCanvas(parent, width, height) {
        var canvas = {};
        canvas.node = document.createElement('canvas');
        canvas.context = canvas.node.getContext('2d');
        canvas.node.width = width || 100;
        canvas.node.height = height || 100;
        parent.appendChild(canvas.node);
        return canvas;
    };

    function init(container, width, height, fillColor) {
        var canvas = createCanvas(container, width, height);
        var ctx = canvas.context;
        // define a custom fillCircle method
        ctx.fillCircle = function(x, y, radius, fillColor) {
            this.fillStyle = fillColor;
            this.beginPath();
            this.moveTo(x, y);
            this.arc(x, y, radius, 0, Math.PI * 2, false);
            this.fill();
            // console.log(fillColor)
        };
        

        // bind mouse events
        canvas.node.onmousemove = function(e) {
            if (!canvas.isDrawing) {
               return;
            }
            var x = e.pageX - this.offsetLeft;
            var y = e.pageY - this.offsetTop;
            var radius = thickness; // or whatever
            var fillColor = colour;
            ctx.fillCircle(x, y, radius, fillColor);
        };
        canvas.node.onmousedown = function(e) {
            canvas.isDrawing = true;
        };
        canvas.node.onmouseup = function(e) {
            canvas.isDrawing = false;
        };
    };

    var container = document.getElementById('draw');

    var height = $('#original-image').height()

    var width = $('#original-image').width()  
    
    init(container, width, height);

};

function saveCanvasImage() {


    function sendImage(drawingSource) {

        document.getElementById('add_drawing').post_drawing.value = drawingSource;

        console.log(document.getElementById('add_drawing').post_drawing.value);

    };

    var drawing = $('#draw > canvas');

    var drawingSource = drawing[0].toDataURL('image/png');

    sendImage(drawingSource)

};


$(document).ready(function(){


    $('#pick').on ('submit', function(event) {

        event.preventDefault();
        makeCanvasWithPen($('#colour').val(), $('#thickness').val());

    });

    $('#add_drawing').on ('submit', function() {

        saveCanvasImage()

    });

});


</script>

